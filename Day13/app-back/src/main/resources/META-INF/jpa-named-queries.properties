
#####################################
#                                   #
#       Request for Company         #
#                                   #
#####################################

# find company which location is equal to the parameter
# native Sql query
Company.findByLocation=Select * from company c where c.location = :location order by c.name desc

# Request to count company which location is equal to the parameter
# native Sql query
Company.findCountByLocation=Select count(c.id) from company c where c.location = :location group by c.location

# find company which location is equal to the parameter
# same but not native query
Company.findByLocationV2=Select c from Company c where c.location = :location order by c.name 

# find the latest id of the company's table
# native Sql query
Company.findLatestId=SELECT MAX(c.id) FROM company c


#####################################
#                                   #
#       Request for Building        #
#                                   #
#####################################


#####################################
#                                   #
#       Request for Scope3          #
#                                   #
#####################################
Entity_map.districtCons=select Sum(quant_cons) as C from entity_map em  where em.id_ecdt= :id ;
Entity_map.districtProd=select Sum(quant_prod) as P from entity_map em  where em.id_ecdt= :id ;

#####################################
#                                   #
#       Request for Message         #
#                                   #
#####################################
# find all messages between two people
Message.findAllMessagesBetweenTwoPeople=SELECT * from messages where id_sender = :id_sender and id_receiver = :id_receiver or id_sender = :id_receiver and id_receiver = :id_sender order by date_send, time_send  
# find all id of contact of the user
Message.findAllContactOfOneUser= select distinct(u.id), first_name as firstName, email, last_name as lastName, status from users u inner join employee e on e.id_employee = u.id where u.id  in (select distinct(u.id) from messages m inner join users u on u.id = m.id_sender or u.id = m.id_receiver where m.id_sender = :id_sender or m.id_receiver = :id_sender) and u.id <> :id_sender and e.id_company = :idCompany

Message.lastId=select max(id_message) from messages;


#####################################
#                                   #
#       Request for Users           #
#                                   #
#####################################
#check Email
Users.checkEmail = Select 1 from users where email = :email
#select one specific user
Users.selectUser = Select * from users where email = :email
Users.selectUserWithId = Select * from users where id = :id

#select users with lastName or firstName
Users.selectUsersWithFirstNameOrLastName = select * from (Select id_employee as id,first_name as firstName, email, last_name as lastName, status ,id_company from employee e inner join users u on e.id_employee = u.id where last_name ilike %:value% or first_name ilike %:value%) A where id_company = :id_company limit 10

#####################################
#                                   #
#       Request for employee        #
#                                   #
#####################################

#verify if users is a employee
Employee.verifyEmployee = select * from employee where id_employee = :id
#select employee in booking for cron task
Employee.selectIdInBooking = select distinct(a.id_employee) from booking b inner join attend a on a.id_booking = b.id_booking inner join employee e on e.id_employee = a.id_employee where status = 'free' and start_time <= :time and end_time >= :time and day = :day
#select employee out booking with status occupy
Employee.selectIdOutBooking = select distinct(e.id_employee) from attend a inner join employee e on e.id_employee = a.id_employee where a.id_employee not in (select distinct(a.id_employee) from booking b inner join attend a on a.id_booking = b.id_booking inner join employee e on e.id_employee = a.id_employee where start_time <= :time and end_time >= :time and day = :day) and status ='occupy';
#select employee from the same company
Employee.selectEmployeeInCompany = select id,sg,status,id_company,id_role,last_name,first_name,email from employee e inner join users u on u.id = e.id_employee where id_company in( select id_company from company c inner join employee e on e.id_company = c.id where id_employee = :id) and id_employee <> :id

#####################################
#                                   #
#       Request for favoris         #
#                                   #
#####################################
#select favoris
Favoris.selectFavorisOFOneUser = select distinct(u.id), first_name as firstName, email, last_name as lastName, status from users u inner join employee e on e.id_employee = u.id inner join favoris f on f.id_person2 = e.id_employee where f.id_person1 = :idPerson
#verifyFavoris
Favoris.verifyTwoPeopleFavoris= select 1 from favoris where id_person1 = :idSender and id_person2 = :idReceiver
#####################################
#                                   #
#       Request for attendMeeting   #
#                                   #
#####################################

#selectMaxId
AttendMeeting.selectMaxIdAttend = select max(id_attend) from attend

#select event for one user
AttendMeeting.selectEventForOneUser = select day,start_time,end_time,title_event, r.name from booking b inner join room r on r.id_room = b.id_room inner join attend a on a.id_booking = b.id_booking where id_employee = :idUser

#####################################
#                                   #
#       Request for RoomDigital     #
#                                   #
#####################################

#select room
RoomDigital.getRooms= select * from room r limit 10
#select meetingroom
RoomDigital.getMeetingRooms= select * from room r where type_room='meetingRoom'
#select room with arguments 
RoomDigital.getRoomsWithSearchMeetingRoom = select * from room r where id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :endTime and day = :day) and id_room not in( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :endTime and day = :day) and id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :startTime and end_time <= :endTime and day = :day) and type_room = 'meetingRoom'
#select room with arguments 
RoomDigital.getRoomsWithSearchBureauSolo= select * from room r where id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :endTime and day = :day) and id_room not in( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :endTime and day = :day) and id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :startTime and end_time <= :endTime and day = :day) and type_room = 'bureauSolo'
#select room with arguments 
RoomDigital.getRoomsWithSearchOpenSpace = select * from room where id_room not in( select  b.id_room from booking b where b.id_room  in( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :endTime and day = :day and type_room='openSpace' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :startTime and day = :day and type_room='openSpace' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :endTime and end_time <= :endTime and day = :day and type_room='openSpace') and day = :day group by b.id_room having count(id_room) >= 20) and type_room='openSpace'
#select room with arguments 
RoomDigital.getRoomsWithSearchSalleTravail = select * from room where id_room not in(select  b.id_room from booking b where b.id_room  in( select r.id_room from room r inner join booking b on b.id_room = r.id_room  where start_time <= :startTime and end_time >= :endTime and day = :day and type_room='salleTravail' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :startTime and day = :day and type_room='salleTravail' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :endTime and end_time <= :endTime and day = :day and type_room='salleTravail') and day = :day group by b.id_room having count(id_room) >= 10) and type_room='salleTravail'
RoomDigital.insertBooking = insert into booking (day, start_time, end_time, id_person, id_room) values(:day, :startTime, :endTime, :idPerson, :idRoom)

#####################################
#                                   #
#       Request for Booking         #
#                                   #
#####################################
#selectMaxId
Booking.selectMaxId = select max(id_booking) from booking
#selectRoomBookedBy Id
Booking.selectRoomBooked = select b.id_room as idroom, day as dayBooking ,start_time as startTime, end_time as endTime,name, floor, type_room as typeroom from booking b inner join room r on r.id_room = b.id_room where id_person = :id and day >= :today order by day, start_time 


#select adress from the habitation
Habitation.selectAdress = select adresse from habitation;


